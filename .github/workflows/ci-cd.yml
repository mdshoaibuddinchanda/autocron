name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

# -------------------------
# JOB: LINT
# -------------------------
jobs:
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy pylint bandit safety
          pip install -e .[dev]

      - name: Install type stubs
        run: |
          python -m pip install types-croniter types-PyYAML

      - name: Run Black
        run: black --check **/*.py

      - name: Run isort
        run: isort --check-only **/*.py

      - name: Run Flake8
        run: flake8 . --max-line-length=100 --extend-ignore=E203,W503

      - name: Run MyPy
        run: mypy autocron --ignore-missing-imports --allow-untyped-defs --no-warn-return-any
        continue-on-error: true

      - name: Run Pylint
        run: pylint autocron --disable=C0111,R0903,R0913
        continue-on-error: true

      - name: Run Bandit
        run: bandit -r autocron -ll
        continue-on-error: true

      - name: Run Safety
        run: safety check
        continue-on-error: true

# -------------------------
# JOB: TEST
# -------------------------
  test:
    name: Unit Tests - ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/AppData/Local/pip/Cache
            ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,notifications]

      - name: Run tests with coverage
        run: |
          pytest --cov=autocron --cov-report=xml --cov-report=term -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
          fail_ci_if_error: false

# -------------------------
# JOB: INTEGRATION TEST
# -------------------------
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run integration tests
        run: |
          pytest tests/test_integration.py -v --tb=short

# -------------------------
# JOB: BUILD
# -------------------------
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/

# -------------------------
# JOB: PUBLISH TO TEST PYPI
# -------------------------
  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository_url: https://test.pypi.org/legacy/
          username: __token__
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          skip-existing: true
        continue-on-error: true

# -------------------------
# JOB: PUBLISH TO REAL PYPI
# -------------------------
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, publish-test-pypi]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          skip-existing: true
        continue-on-error: true
